#!/usr/bin/env python3
"""
SmartOptimizer v1.2.0 - Interface Universelle Simple
Un seul fichier pour tout faire : installation, d√©tection, optimisation

Auteur: Pascal Froment <pascal.froment@gmail.com>
GitHub: https://github.com/FROMENT/SmartOptimizer
"""

import os
import sys
import platform
import subprocess
from pathlib import Path
import json

class SmartOptimizerUniversal:
    def __init__(self):
        self.system = platform.system().lower()
        self.home = Path.home()
        self.is_windows = self.system == 'windows'
        self.is_macos = self.system == 'darwin'
        self.is_linux = self.system == 'linux'
        
        # Gestion du mode simulation
        self.simulation_mode = self.load_simulation_mode()
        
        # Gestion des th√®mes
        self.theme = self.load_theme()
        self.setup_colors()
        
    def setup_colors(self):
        """Configure les couleurs selon le th√®me"""
        # Couleurs de base
        base_colors = {
            'reset': '\033[0m',
            'bold': '\033[1m',
            'dim': '\033[2m',
            'underline': '\033[4m'
        }
        
        if self.theme == 'dark':
            # Th√®me sombre - couleurs vives
            theme_colors = {
                'primary': '\033[96m',      # Cyan vif
                'success': '\033[92m',      # Vert vif
                'warning': '\033[93m',      # Jaune vif
                'danger': '\033[91m',       # Rouge vif
                'danger_bg': '\033[41m',    # Fond rouge vif
                'success_bg': '\033[42m',   # Fond vert vif
                'info': '\033[94m',         # Bleu vif
                'text': '\033[97m',         # Blanc
                'muted': '\033[90m',        # Gris fonc√©
                'accent': '\033[95m'        # Magenta
            }
        elif self.theme == 'light':
            # Th√®me clair - couleurs plus sombres
            theme_colors = {
                'primary': '\033[36m',      # Cyan fonc√©
                'success': '\033[32m',      # Vert fonc√©
                'warning': '\033[33m',      # Jaune fonc√©
                'danger': '\033[31m',       # Rouge fonc√©
                'danger_bg': '\033[101m',   # Fond rouge clair
                'success_bg': '\033[102m',  # Fond vert clair
                'info': '\033[34m',         # Bleu fonc√©
                'text': '\033[30m',         # Noir
                'muted': '\033[37m',        # Gris clair
                'accent': '\033[35m'        # Magenta fonc√©
            }
        else:  # auto/syst√®me
            # D√©tection automatique du th√®me syst√®me
            system_dark = self.detect_system_dark_mode()
            if system_dark:
                theme_colors = {
                    'primary': '\033[96m',
                    'success': '\033[92m',
                    'warning': '\033[93m',
                    'danger': '\033[91m',
                    'danger_bg': '\033[41m',
                    'success_bg': '\033[42m',
                    'info': '\033[94m',
                    'text': '\033[97m',
                    'muted': '\033[90m',
                    'accent': '\033[95m'
                }
            else:
                theme_colors = {
                    'primary': '\033[36m',
                    'success': '\033[32m',
                    'warning': '\033[33m',
                    'danger': '\033[31m',
                    'danger_bg': '\033[101m',
                    'success_bg': '\033[102m',
                    'info': '\033[34m',
                    'text': '\033[30m',
                    'muted': '\033[37m',
                    'accent': '\033[35m'
                }
        
        # Couleurs sp√©ciales pour le mode r√©el (toujours rouge vif)
        danger_real_colors = {
            'real_danger': '\033[1m\033[91m',        # Rouge vif + gras
            'real_danger_bg': '\033[1m\033[41m\033[97m',  # Fond rouge vif + texte blanc + gras
            'real_warning': '\033[1m\033[93m',       # Jaune vif + gras pour avertissements
            'blink': '\033[5m'                       # Clignotant (si support√©)
        }
        
        # Combiner toutes les couleurs
        self.colors = {**base_colors, **theme_colors, **danger_real_colors}
        
    def detect_system_dark_mode(self):
        """D√©tecte si le syst√®me utilise le mode sombre"""
        try:
            if self.is_macos:
                result = subprocess.run(['defaults', 'read', '-g', 'AppleInterfaceStyle'], 
                                      capture_output=True, text=True)
                return 'Dark' in result.stdout
            elif self.is_windows:
                # Sur Windows, v√©rifier le registre
                try:
                    import winreg
                    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                                       r"Software\Microsoft\Windows\CurrentVersion\Themes\Personalize")
                    value = winreg.QueryValueEx(key, "AppsUseLightTheme")[0]
                    winreg.CloseKey(key)
                    return value == 0  # 0 = mode sombre
                except:
                    return False
            elif self.is_linux:
                # Sur Linux, v√©rifier les variables d'environnement
                color_scheme = os.getenv('GTK_THEME', '').lower()
                return 'dark' in color_scheme
        except:
            pass
        return False  # Par d√©faut, mode clair
        
    def load_theme(self):
        """Charge le th√®me depuis la configuration"""
        config_path = Path("smartoptimizer.conf")
        if config_path.exists():
            try:
                with open(config_path, 'r') as f:
                    content = f.read()
                    if "THEME=dark" in content:
                        return 'dark'
                    elif "THEME=light" in content:
                        return 'light'
                    elif "THEME=auto" in content:
                        return 'auto'
            except:
                pass
        return 'auto'  # Th√®me automatique par d√©faut
        
    def save_theme(self, theme):
        """Sauvegarde le th√®me dans la configuration"""
        config_path = Path("smartoptimizer.conf")
        if config_path.exists():
            try:
                with open(config_path, 'r') as f:
                    content = f.read()
                
                # Remplacer ou ajouter la ligne THEME
                lines = content.split('\n')
                theme_found = False
                new_lines = []
                
                for line in lines:
                    if line.startswith('THEME='):
                        new_lines.append(f"THEME={theme}")
                        theme_found = True
                    else:
                        new_lines.append(line)
                
                if not theme_found:
                    new_lines.append(f"THEME={theme}")
                
                with open(config_path, 'w') as f:
                    f.write('\n'.join(new_lines))
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur sauvegarde th√®me: {e}")
        else:
            self.create_config()
        
    def main_menu(self):
        """Menu principal avec gestion du mode simulation/r√©el et th√®mes"""
        # Couleur selon le mode avec rouge vif pour mode r√©el
        if self.simulation_mode:
            mode_color = self.colors['success']
            mode_text = "üü¢ MODE SIMULATION (S√©curis√©)"
            bg_color = self.colors['success_bg']
        else:
            mode_color = self.colors['real_danger']
            mode_text = "üî¥ MODE R√âEL (DANGER!)"
            bg_color = self.colors['real_danger_bg']
            
        # Affichage du th√®me actuel
        theme_info = {
            'auto': f"üåì Auto ({self.get_current_theme_name()})",
            'dark': "üåô Sombre", 
            'light': "‚òÄÔ∏è  Clair"
        }
        current_theme = theme_info.get(self.theme, self.theme)
            
        print(f"{self.colors['primary']}{self.colors['bold']}üöÄ SmartOptimizer v1.2.0 - Interface Universelle{self.colors['reset']}")
        print("=" * 57)
        print(f"{self.colors['info']}üñ•Ô∏è  OS: {platform.system()} | Utilisateur: {os.getenv('USER', os.getenv('USERNAME'))}{self.colors['reset']}")
        print(f"{self.colors['muted']}üë§ Auteur: Pascal Froment <pascal.froment@gmail.com>{self.colors['reset']}")
        print(f"{self.colors['muted']}üé® Th√®me: {current_theme}{self.colors['reset']}")
        print()
        print(f"{bg_color} {mode_text} {self.colors['reset']}")
        print()
        print(f"{self.colors['text']}Que voulez-vous faire ?{self.colors['reset']}")
        print()
        print(f"{self.colors['text']}1Ô∏è‚É£  üìä D√©tecter mes services cloud{self.colors['reset']}")
        print(f"{self.colors['text']}2Ô∏è‚É£  üè¢ Analyser OneDrive Business/Enterprise{self.colors['reset']}") 
        print(f"{self.colors['text']}3Ô∏è‚É£  üîç Vue d'ensemble rapide{self.colors['reset']}")
        print(f"{self.colors['text']}4Ô∏è‚É£  üßπ Optimiser un dossier{self.colors['reset']}")
        print(f"{self.colors['text']}5Ô∏è‚É£  ‚öôÔ∏è  Installer/configurer SmartOptimizer{self.colors['reset']}")
        print(f"{self.colors['text']}6Ô∏è‚É£  üìö Afficher l'aide{self.colors['reset']}")
        print(f"{mode_color}7Ô∏è‚É£  üîÑ Changer le mode (actuellement: {'SIMULATION' if self.simulation_mode else 'R√âEL'}){self.colors['reset']}")
        print(f"{self.colors['accent']}8Ô∏è‚É£  üé® Changer le th√®me (actuellement: {current_theme}){self.colors['reset']}")
        print(f"{self.colors['muted']}0Ô∏è‚É£  ‚ùå Quitter{self.colors['reset']}")
        print()
        
        try:
            choice = input(f"{self.colors['primary']}Votre choix (1-8, 0 pour quitter) : {self.colors['reset']}").strip()
            
            if choice == "1":
                self.detect_cloud_services()
            elif choice == "2":
                self.analyze_onedrive_business()
            elif choice == "3":
                self.quick_overview()
            elif choice == "4":
                self.optimize_folder()
            elif choice == "5":
                self.install_configure()
            elif choice == "6":
                self.show_help()
            elif choice == "7":
                self.toggle_simulation_mode()
            elif choice == "8":
                self.change_theme()
            elif choice == "0":
                print(f"{self.colors['success']}üëã Au revoir !{self.colors['reset']}")
                return
            else:
                print(f"{self.colors['warning']}‚ùå Choix invalide{self.colors['reset']}")
                
        except KeyboardInterrupt:
            print("\nüëã Au revoir !")
            return
            
        # Revenir au menu
        input(f"\n{self.colors['muted']}Appuyez sur Entr√©e pour continuer...{self.colors['reset']}")
        self.main_menu()
        
    def get_current_theme_name(self):
        """Retourne le nom du th√®me actuellement appliqu√©"""
        if self.theme == 'auto':
            if self.detect_system_dark_mode():
                return "Sombre d√©tect√©"
            else:
                return "Clair d√©tect√©"
        return self.theme.title()
        
    def change_theme(self):
        """Interface pour changer le th√®me"""
        print(f"\n{self.colors['accent']}üé® CHANGEMENT DE TH√àME{self.colors['reset']}")
        print("=" * 25)
        
        current_theme_name = self.get_current_theme_name()
        print(f"{self.colors['text']}Th√®me actuel: {self.colors['info']}{self.theme} ({current_theme_name}){self.colors['reset']}")
        print()
        
        print(f"{self.colors['text']}Th√®mes disponibles :{self.colors['reset']}")
        print(f"{self.colors['accent']}1{self.colors['reset']} - {self.colors['text']}üåì Auto (s'adapte au syst√®me){self.colors['reset']}")
        print(f"{self.colors['accent']}2{self.colors['reset']} - {self.colors['text']}üåô Sombre (couleurs vives){self.colors['reset']}")
        print(f"{self.colors['accent']}3{self.colors['reset']} - {self.colors['text']}‚òÄÔ∏è  Clair (couleurs sombres){self.colors['reset']}")
        print()
        
        if self.theme == 'auto':
            system_dark = self.detect_system_dark_mode()
            print(f"{self.colors['info']}‚ÑπÔ∏è  Syst√®me d√©tect√©: {'üåô Mode sombre' if system_dark else '‚òÄÔ∏è  Mode clair'}{self.colors['reset']}")
            print()
        
        try:
            choice = input(f"{self.colors['primary']}Votre choix (1-3) : {self.colors['reset']}").strip()
            
            if choice == "1":
                new_theme = "auto"
                theme_name = "üåì Auto"
            elif choice == "2":
                new_theme = "dark" 
                theme_name = "üåô Sombre"
            elif choice == "3":
                new_theme = "light"
                theme_name = "‚òÄÔ∏è  Clair"
            else:
                print(f"{self.colors['warning']}‚ùå Choix invalide{self.colors['reset']}")
                return
                
            # Appliquer le nouveau th√®me
            old_theme = self.theme
            self.theme = new_theme
            self.save_theme(new_theme)
            self.setup_colors()  # Reconfigurer les couleurs
            
            print(f"\n{self.colors['success']}‚úÖ Th√®me chang√©: {theme_name}{self.colors['reset']}")
            
            if old_theme != new_theme:
                print(f"{self.colors['info']}‚ÑπÔ∏è  Les nouvelles couleurs seront visibles au prochain menu{self.colors['reset']}")
                
        except KeyboardInterrupt:
            print(f"\n{self.colors['muted']}‚ùå Changement de th√®me annul√©{self.colors['reset']}")
        
    def load_simulation_mode(self):
        """Charge le mode simulation depuis la configuration"""
        config_path = Path("smartoptimizer.conf")
        if config_path.exists():
            try:
                with open(config_path, 'r') as f:
                    content = f.read()
                    if "SIMULATION_MODE=true" in content:
                        return True
                    elif "SIMULATION_MODE=false" in content:
                        return False
            except:
                pass
        return True  # Mode simulation par d√©faut
        
    def save_simulation_mode(self, mode):
        """Sauvegarde le mode simulation dans la configuration"""
        config_path = Path("smartoptimizer.conf")
        if config_path.exists():
            try:
                with open(config_path, 'r') as f:
                    content = f.read()
                
                # Remplacer la ligne SIMULATION_MODE
                new_content = ""
                for line in content.split('\n'):
                    if line.startswith('SIMULATION_MODE='):
                        new_content += f"SIMULATION_MODE={'true' if mode else 'false'}\n"
                    else:
                        new_content += line + '\n'
                
                with open(config_path, 'w') as f:
                    f.write(new_content.rstrip() + '\n')
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur sauvegarde configuration: {e}")
        else:
            # Cr√©er une configuration de base
            self.create_config()
            
    def toggle_simulation_mode(self):
        """Bascule entre mode simulation et mode r√©el"""
        print(f"\n{self.colors['primary']}üîÑ CHANGEMENT DE MODE{self.colors['reset']}")
        print("=" * 25)
        
        current_mode = "SIMULATION" if self.simulation_mode else "R√âEL"
        new_mode = "R√âEL" if self.simulation_mode else "SIMULATION"
        
        print(f"{self.colors['text']}Mode actuel: {self.colors['success'] if self.simulation_mode else self.colors['real_danger']}{current_mode}{self.colors['reset']}")
        print(f"{self.colors['text']}Nouveau mode: {self.colors['real_danger'] if self.simulation_mode else self.colors['success']}{new_mode}{self.colors['reset']}")
        print()
        
        if self.simulation_mode:
            # Passage en mode r√©el - Avertissement renforc√©
            print(f"{self.colors['real_danger_bg']} ‚ö†Ô∏è  ATTENTION - MODE R√âEL DANGEREUX ‚ö†Ô∏è  {self.colors['reset']}")
            print()
            print(f"{self.colors['text']}En mode r√©el, SmartOptimizer peut :{self.colors['reset']}")
            print(f"{self.colors['real_danger']}‚Ä¢ Supprimer d√©finitivement des fichiers{self.colors['reset']}")
            print(f"{self.colors['real_danger']}‚Ä¢ Modifier la structure de vos dossiers{self.colors['reset']}")
            print(f"{self.colors['real_danger']}‚Ä¢ D√©placer des documents importants{self.colors['reset']}")
            print(f"{self.colors['real_danger']}‚Ä¢ Causer des pertes de donn√©es irr√©versibles{self.colors['reset']}")
            print()
            print(f"{self.colors['warning']}{self.colors['bold']}üõ°Ô∏è  Recommandations OBLIGATOIRES :{self.colors['reset']}")
            print(f"{self.colors['text']}   ‚Ä¢ Faire une sauvegarde Time Machine AVANT{self.colors['reset']}")
            print(f"{self.colors['text']}   ‚Ä¢ Tester sur un petit dossier d'abord{self.colors['reset']}")
            print(f"{self.colors['text']}   ‚Ä¢ V√©rifier que vos clouds ne synchronisent pas{self.colors['reset']}")
            print(f"{self.colors['text']}   ‚Ä¢ Avoir des sauvegardes r√©centes{self.colors['reset']}")
            print()
            
            confirm = input(f"{self.colors['real_danger']}{self.colors['bold']}√ätes-vous CERTAIN de vouloir activer le mode r√©el ? (tapez 'OUI DANGER' en majuscules) : {self.colors['reset']}")
            
            if confirm == "OUI DANGER":
                self.simulation_mode = False
                self.save_simulation_mode(False)
                print(f"\n{self.colors['real_danger_bg']} üî¥ MODE R√âEL ACTIV√â - DANGER ! {self.colors['reset']}")
                print(f"{self.colors['real_warning']}‚ö†Ô∏è  Soyez EXTR√äMEMENT prudent avec vos actions !{self.colors['reset']}")
                print(f"{self.colors['real_danger']}‚ö†Ô∏è  Toute suppression sera D√âFINITIVE !{self.colors['reset']}")
            else:
                print(f"\n{self.colors['success']}‚úÖ Mode simulation conserv√© (sage d√©cision){self.colors['reset']}")
        else:
            # Passage en mode simulation - Plus simple
            print(f"{self.colors['success']}Retour au mode simulation s√©curis√© ?{self.colors['reset']}")
            confirm = input(f"{self.colors['text']}Confirmer (o/n) : {self.colors['reset']}").lower()
            
            if confirm in ['o', 'oui', 'y', 'yes']:
                self.simulation_mode = True
                self.save_simulation_mode(True)
                print(f"\n{self.colors['success']}üü¢ MODE SIMULATION ACTIV√â{self.colors['reset']}")
                print(f"{self.colors['text']}‚úÖ Vos fichiers sont maintenant prot√©g√©s{self.colors['reset']}")
            else:
                print(f"\n{self.colors['real_danger']}üî¥ Mode r√©el conserv√©{self.colors['reset']}")
                
    def optimize_folder(self):
        """Optimisation avec respect du mode simulation/r√©el"""
        mode_text = "SIMULATION" if self.simulation_mode else "R√âEL"
        mode_color = self.colors['green'] if self.simulation_mode else self.colors['red']
        
        print(f"\nüßπ OPTIMISATION DE DOSSIER - MODE {mode_color}{mode_text}{self.colors['reset']}")
        print("=" * 40)
        
        if not self.simulation_mode:
            print(f"{self.colors['bg_red']}{self.colors['white']} ‚ö†Ô∏è  MODE R√âEL ACTIF - MODIFICATIONS PERMANENTES ‚ö†Ô∏è  {self.colors['reset']}")
            print()
        
        print("üí° Dossiers sugg√©r√©s :")
        print("   ‚Ä¢ Desktop (ou Entr√©e)")
        print("   ‚Ä¢ Downloads")
        print("   ‚Ä¢ Documents")
        print("   ‚Ä¢ Pictures")
        print("   ‚Ä¢ ou chemin complet comme /Users/nom/dossier")
        print()
        
        folder_path = input("üìÅ Chemin du dossier √† analyser : ").strip()
        
        # G√©rer les chemins courts et complets
        if not folder_path or folder_path.lower() == "desktop":
            if self.is_windows:
                folder_path = f"{self.home}\\Desktop"
            else:
                folder_path = f"{self.home}/Desktop"
        elif folder_path.lower() == "downloads":
            folder_path = f"{self.home}/Downloads"
        elif folder_path.lower() == "documents":
            folder_path = f"{self.home}/Documents"
        elif folder_path.lower() == "pictures":
            folder_path = f"{self.home}/Pictures"
        elif not folder_path.startswith('/') and not folder_path.startswith('C:'):
            folder_path = f"{self.home}/{folder_path}"
                
        path = Path(folder_path)
        
        if not path.exists():
            print(f"‚ùå Dossier introuvable: {path}")
            return
            
        print(f"üîç Analyse de: {path}")
        print()
        
        # Recherche de doublons
        files_by_size = {}
        duplicates_found = 0
        space_recoverable = 0
        
        try:
            for file_path in path.rglob("*"):
                if file_path.is_file():
                    try:
                        size = file_path.stat().st_size
                        if size > 0:
                            if size not in files_by_size:
                                files_by_size[size] = []
                            files_by_size[size].append(file_path)
                    except:
                        continue
                        
            doublons_groupes = []
            for size, files in files_by_size.items():
                if len(files) > 1:
                    doublons_groupes.append(files)
                    duplicates_found += len(files) - 1
                    space_recoverable += size * (len(files) - 1)
                    
            print(f"üìä R√©sultats ({'SIMULATION' if self.simulation_mode else 'MODE R√âEL'}):")
            print(f"   üîç Doublons potentiels: {duplicates_found}")
            print(f"   üíæ Espace r√©cup√©rable: {self.format_size(space_recoverable)}")
            print()
            
            if self.simulation_mode:
                print(f"{self.colors['green']}‚ÑπÔ∏è  Mode simulation - Aucun fichier supprim√©{self.colors['reset']}")
            else:
                if doublons_groupes:
                    print(f"{self.colors['red']}‚ö†Ô∏è  MODE R√âEL - Suppression possible{self.colors['reset']}")
                    confirm = input(f"{self.colors['red']}Voulez-vous VRAIMENT supprimer {duplicates_found} doublons ? (tapez 'SUPPRIMER') : {self.colors['reset']}")
                    
                    if confirm == "SUPPRIMER":
                        files_deleted = 0
                        space_freed = 0
                        
                        for groupe in doublons_groupes:
                            # Garder le premier, supprimer les autres
                            for fichier in groupe[1:]:
                                try:
                                    size = fichier.stat().st_size
                                    fichier.unlink()
                                    files_deleted += 1
                                    space_freed += size
                                    print(f"{self.colors['red']}üóëÔ∏è  Supprim√©: {fichier.name}{self.colors['reset']}")
                                except Exception as e:
                                    print(f"‚ùå Erreur: {e}")
                                    
                        print(f"\n{self.colors['red']}‚úÖ Suppression termin√©e !{self.colors['reset']}")
                        print(f"   üìÅ {files_deleted} fichiers supprim√©s")
                        print(f"   üíæ {self.format_size(space_freed)} lib√©r√©s")
                    else:
                        print("‚ùå Suppression annul√©e")
                else:
                    print("‚úÖ Aucun doublon √† supprimer")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur d'analyse: {e}")
        
    def detect_cloud_services(self):
        """D√©tection simple des services cloud"""
        print("\n‚òÅÔ∏è  D√âTECTION DES SERVICES CLOUD")
        print("=" * 35)
        
        services_found = []
        total_size = 0
        
        # Chemins cloud selon l'OS
        cloud_paths = self.get_cloud_paths()
        
        for service, paths in cloud_paths.items():
            for path_str in paths:
                path = Path(path_str)
                if path.exists() and path.is_dir():
                    try:
                        size = self.get_folder_size(path)
                        files = self.count_files(path)
                        
                        services_found.append({
                            'name': service,
                            'path': str(path),
                            'size': size,
                            'files': files
                        })
                        
                        total_size += size
                        
                        print(f"‚úÖ {service}")
                        print(f"   üìÅ {path}")
                        print(f"   üíæ {self.format_size(size)}")
                        print(f"   üìÑ {files:,} fichiers")
                        print()
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è  {service} - Erreur: {e}")
                        
        if services_found:
            print(f"üìä R√âSUM√â:")
            print(f"   Services d√©tect√©s: {len(services_found)}")
            print(f"   Espace total: {self.format_size(total_size)}")
        else:
            print("‚ÑπÔ∏è  Aucun service cloud d√©tect√©")
            
    def analyze_onedrive_business(self):
        """Analyse OneDrive Business simplifi√©e"""
        print("\nüè¢ ANALYSE ONEDRIVE BUSINESS/ENTERPRISE")
        print("=" * 40)
        
        business_paths = []
        
        if self.is_windows:
            # Windows - chercher dans les dossiers utilisateur
            user_path = Path(f"C:\\Users\\{os.getenv('USERNAME', 'user')}")
            for item in user_path.glob("OneDrive - *"):
                if item.is_dir():
                    business_paths.append(item)
                    
        elif self.is_macos:
            # macOS - chercher dans CloudStorage
            cloudstorage = self.home / "Library/CloudStorage"
            for item in cloudstorage.glob("OneDrive-*"):
                if item.is_dir() and "Personal" not in item.name:
                    business_paths.append(item)
                    
        elif self.is_linux:
            # Linux - chercher les configurations OneDrive
            for pattern in ["OneDrive-*", ".onedrive*", "onedrive*"]:
                for item in self.home.glob(pattern):
                    if item.is_dir():
                        business_paths.append(item)
                        
        if business_paths:
            for path in business_paths:
                tenant_name = path.name.replace("OneDrive-", "").replace("OneDrive - ", "")
                size = self.get_folder_size(path)
                files = self.count_files(path)
                
                print(f"‚úÖ Tenant: {tenant_name}")
                print(f"   üìÅ {path}")
                print(f"   üíæ {self.format_size(size)}")
                print(f"   üìÑ {files:,} fichiers")
                print(f"   üîÑ Type: Business/Enterprise")
                print()
        else:
            print("‚ÑπÔ∏è  Aucun tenant OneDrive Business d√©tect√©")
            print("üí° V√©rifiez que OneDrive Business est configur√©")
            
    def quick_overview(self):
        """Vue d'ensemble rapide du syst√®me"""
        print("\nüîç VUE D'ENSEMBLE RAPIDE")
        print("=" * 25)
        
        # Analyser le dossier home
        print(f"üìÅ Analyse de: {self.home}")
        print()
        
        # Trouver les plus gros dossiers
        large_folders = []
        
        try:
            for item in self.home.iterdir():
                if item.is_dir() and not item.name.startswith('.'):
                    try:
                        size = self.get_folder_size(item, max_depth=2)
                        if size > 100 * 1024 * 1024:  # Plus de 100MB
                            large_folders.append((item.name, size))
                    except:
                        continue
                        
            # Trier par taille
            large_folders.sort(key=lambda x: x[1], reverse=True)
            
            print("üìä Plus gros dossiers:")
            for name, size in large_folders[:10]:
                print(f"   üìÅ {name:20} {self.format_size(size):>10}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur d'analyse: {e}")
            
    def OLD_simulate_optimization(self):
        """Simulation d'optimisation"""
        print("\nüßπ SIMULATION D'OPTIMISATION")
        print("=" * 30)
        
        print("üí° Dossiers sugg√©r√©s :")
        print("   ‚Ä¢ Desktop (ou Entr√©e)")
        print("   ‚Ä¢ Downloads")
        print("   ‚Ä¢ Documents")
        print("   ‚Ä¢ Pictures")
        print("   ‚Ä¢ ou chemin complet comme /Users/nom/dossier")
        print()
        
        folder_path = input("üìÅ Chemin du dossier √† analyser : ").strip()
        
        # G√©rer les chemins courts et complets
        if not folder_path or folder_path.lower() == "desktop":
            if self.is_windows:
                folder_path = f"{self.home}\\Desktop"
            else:
                folder_path = f"{self.home}/Desktop"
        elif folder_path.lower() == "downloads":
            folder_path = f"{self.home}/Downloads"
        elif folder_path.lower() == "documents":
            folder_path = f"{self.home}/Documents"
        elif folder_path.lower() == "pictures":
            folder_path = f"{self.home}/Pictures"
        elif not folder_path.startswith('/') and not folder_path.startswith('C:'):
            # Chemin relatif, l'ajouter au home
            folder_path = f"{self.home}/{folder_path}"
                
        path = Path(folder_path)
        
        if not path.exists():
            print(f"‚ùå Dossier introuvable: {path}")
            return
            
        print(f"üîç Analyse de: {path}")
        print()
        
        # Recherche de doublons simples
        files_by_size = {}
        duplicates_found = 0
        space_recoverable = 0
        
        try:
            for file_path in path.rglob("*"):
                if file_path.is_file():
                    try:
                        size = file_path.stat().st_size
                        if size > 0:
                            if size not in files_by_size:
                                files_by_size[size] = []
                            files_by_size[size].append(file_path)
                    except:
                        continue
                        
            for size, files in files_by_size.items():
                if len(files) > 1:
                    duplicates_found += len(files) - 1
                    space_recoverable += size * (len(files) - 1)
                    
            print(f"üìä R√©sultats (SIMULATION SEULEMENT):")
            print(f"   üîç Doublons potentiels: {duplicates_found}")
            print(f"   üíæ Espace r√©cup√©rable: {self.format_size(space_recoverable)}")
            print()
            print("‚ÑπÔ∏è  Mode simulation - Aucun fichier supprim√©")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur d'analyse: {e}")
            
    def install_configure(self):
        """Installation et configuration"""
        print("\n‚öôÔ∏è  INSTALLATION ET CONFIGURATION")
        print("=" * 35)
        
        print("üîç V√©rification de l'environnement...")
        
        # V√©rifier Python
        python_version = sys.version_info
        if python_version >= (3, 7):
            print(f"‚úÖ Python {platform.python_version()}")
        else:
            print(f"‚ùå Python {platform.python_version()} - Version 3.7+ requise")
            return
            
        # Cr√©er la configuration
        config_path = Path("smartoptimizer.conf")
        if config_path.exists():
            print(f"‚úÖ Configuration existante: {config_path}")
        else:
            self.create_config()
            print(f"‚úÖ Configuration cr√©√©e: {config_path}")
            
        # Rendre ex√©cutables (Unix)
        if not self.is_windows:
            try:
                os.chmod(__file__, 0o755)
                print("‚úÖ Permissions d'ex√©cution configur√©es")
            except:
                pass
                
        print()
        print("üéâ SmartOptimizer est configur√© et pr√™t √† utiliser !")
        print()
        print("üí° Commandes rapides:")
        if self.is_windows:
            print(f"   python {__file__}")
        else:
            print(f"   python3 {__file__}")
            print(f"   ./{Path(__file__).name}")
            
    def show_help(self):
        """Affichage de l'aide"""
        print("\nüìö AIDE SMARTOPTIMIZER")
        print("=" * 23)
        print()
        print("üéØ FONCTIONNALIT√âS:")
        print("‚Ä¢ D√©tection automatique des services cloud")
        print("‚Ä¢ Support OneDrive Business/Enterprise")
        print("‚Ä¢ Optimisation multi-OS (Windows/macOS/Linux)")
        print("‚Ä¢ Mode simulation s√©curis√©")
        print()
        print("üîß UTILISATION:")
        if self.is_windows:
            print("   python smart.py")
        else:
            print("   python3 smart.py")
            print("   ./smart.py")
        print()
        print("üÜò SUPPORT:")
        print("‚Ä¢ Mode simulation activ√© par d√©faut")
        print("‚Ä¢ Aucune suppression sans confirmation")
        print("‚Ä¢ Sauvegardes recommand√©es avant optimisation")
        print()
        print("üåç COMPATIBILIT√â:")
        print("‚Ä¢ Windows 10/11")
        print("‚Ä¢ macOS 12+")
        print("‚Ä¢ Linux (Ubuntu/Debian/Fedora/Arch)")
        
    def get_cloud_paths(self):
        """Chemins cloud selon l'OS"""
        username = os.getenv('USER') or os.getenv('USERNAME') or 'user'
        
        if self.is_windows:
            return {
                "iCloud Drive": [f"C:\\Users\\{username}\\iCloudDrive"],
                "Google Drive": [f"C:\\Users\\{username}\\Google Drive"],
                "OneDrive": [f"C:\\Users\\{username}\\OneDrive"],
                "Dropbox": [f"C:\\Users\\{username}\\Dropbox"]
            }
        elif self.is_macos:
            return {
                "iCloud Drive": [f"{self.home}/Library/Mobile Documents/com~apple~CloudDocs"],
                "Google Drive": [f"{self.home}/Google Drive", f"{self.home}/Library/CloudStorage/GoogleDrive-{username}@gmail.com"],
                "OneDrive": [f"{self.home}/OneDrive", f"{self.home}/Library/CloudStorage/OneDrive-Personal"],
                "Dropbox": [f"{self.home}/Dropbox"]
            }
        else:  # Linux
            return {
                "Google Drive": [f"{self.home}/GoogleDrive", f"{self.home}/Google Drive"],
                "OneDrive": [f"{self.home}/OneDrive", f"{self.home}/.onedrive"],
                "Dropbox": [f"{self.home}/Dropbox", f"{self.home}/.dropbox"]
            }
            
    def get_folder_size(self, path, max_depth=3):
        """Calcule la taille d'un dossier"""
        total_size = 0
        try:
            for root, dirs, files in os.walk(path):
                # Limiter la profondeur
                level = len(Path(root).relative_to(path).parts)
                if level >= max_depth:
                    dirs.clear()
                    
                for file in files[:100]:  # Limiter pour la performance
                    try:
                        file_path = Path(root) / file
                        total_size += file_path.stat().st_size
                    except:
                        continue
                        
                # Limiter pour √©viter les timeouts
                if total_size > 50 * 1024**3:  # 50GB max
                    break
        except:
            pass
        return total_size
        
    def count_files(self, path, max_count=1000):
        """Compte les fichiers dans un dossier"""
        count = 0
        try:
            for root, dirs, files in os.walk(path):
                count += len(files)
                if count > max_count:
                    break
                # Limiter la profondeur
                level = len(Path(root).relative_to(path).parts)
                if level >= 3:
                    dirs.clear()
        except:
            pass
        return min(count, max_count)
        
    def format_size(self, size_bytes):
        """Formate une taille en bytes"""
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size_bytes < 1024:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024
        return f"{size_bytes:.1f} PB"
        
    def create_config(self):
        """Cr√©e le fichier de configuration"""
        config = f"""# SmartOptimizer Configuration
# G√©n√©ration automatique: {platform.system()}

# Mode simulation (s√©curis√©)
SIMULATION_MODE=true

# Seuils de confiance
CONFIDENCE_THRESHOLD=70

# Optimisations cloud
CLOUD_OPTIMIZATION=true
ONEDRIVE_BUSINESS_SUPPORT=true

# Performance  
MAX_FILE_SCAN=5000
TIMEOUT_SECONDS=60
"""
        with open("smartoptimizer.conf", "w") as f:
            f.write(config)

def main():
    import argparse
    
    app = SmartOptimizerUniversal()
    
    # Permettre l'usage en ligne de commande
    if len(sys.argv) > 1:
        parser = argparse.ArgumentParser(description='SmartOptimizer Simple')
        parser.add_argument('--detect', action='store_true', help='D√©tecter les services cloud')
        parser.add_argument('--business', action='store_true', help='Analyser OneDrive Business')
        parser.add_argument('--overview', action='store_true', help='Vue d\'ensemble rapide')
        parser.add_argument('--install', action='store_true', help='Installer/configurer')
        
        args = parser.parse_args()
        
        if args.detect:
            app.detect_cloud_services()
        elif args.business:
            app.analyze_onedrive_business()
        elif args.overview:
            app.quick_overview()
        elif args.install:
            app.install_configure()
        else:
            app.show_help()
    else:
        # Interface interactive
        try:
            app.main_menu()
        except (EOFError, KeyboardInterrupt):
            print("\nüëã Au revoir !")

if __name__ == "__main__":
    main()