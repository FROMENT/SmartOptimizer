#!/bin/bash
# Cloud Deduplication Strategy - Strat√©gie compl√®te de d√©duplication cloud

echo "üîÑ STRAT√âGIE DE D√âDUPLICATION CLOUD"
echo "==================================="

HOME_DIR="$HOME"
SMARTOPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Configuration des strat√©gies par service
declare -A CLOUD_STRATEGIES
CLOUD_STRATEGIES=(
    ["iCloud"]="personal_system_files"
    ["Google Drive"]="collaboration_office"
    ["OneDrive"]="business_office365"
    ["Dropbox"]="creative_sharing"
    ["Box"]="enterprise_compliance"
)

echo "üìã Strat√©gies de d√©duplication par service:"
for service in "${!CLOUD_STRATEGIES[@]}"; do
    echo "   ‚Ä¢ $service: ${CLOUD_STRATEGIES[$service]}"
done
echo ""

# 1. Analyse des imbrications
echo "üîç √âtape 1: Analyse des imbrications cloud..."
python3 "$SMARTOPT_DIR/src/analyzers/cloud_nesting_analyzer.py" "$HOME_DIR"

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur lors de l'analyse des imbrications"
    exit 1
fi

echo ""
read -p "Continuer avec l'optimisation? (Y/n): " continue_opt
if [[ $continue_opt =~ ^[Nn]$ ]]; then
    echo "‚ùå Optimisation annul√©e"
    exit 0
fi

# 2. V√©rification s√©curit√© obligatoire
echo ""
echo "üîí √âtape 2: V√©rification s√©curit√© cloud..."
"$SMARTOPT_DIR/scripts/quick_cloud_safety_check.sh"

if [ $? -ne 0 ]; then
    echo "‚ùå Synchronisations actives d√©tect√©es - ARR√äT"
    echo "   Attendez la stabilisation avant de continuer"
    exit 1
fi

echo "‚úÖ S√©curit√© valid√©e - Proc√©dure de d√©duplication autoris√©e"

# 3. Sauvegarde pr√©ventive
echo ""
echo "üíæ √âtape 3: Sauvegarde pr√©ventive..."
BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="$HOME_DIR/SmartOptimizer_Backups/pre_deduplication_$BACKUP_TIMESTAMP"

read -p "Cr√©er une sauvegarde compl√®te avant d√©duplication? (Y/n): " create_backup
if [[ ! $create_backup =~ ^[Nn]$ ]]; then
    echo "   üì¶ Cr√©ation de la sauvegarde..."
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarder les configurations des services cloud
    echo "   ‚öôÔ∏è  Sauvegarde des configurations..."
    
    # iCloud Drive
    if [ -d "$HOME_DIR/Library/Mobile Documents" ]; then
        echo "iCloud Drive configuration backup" > "$BACKUP_DIR/icloud_config.txt"
        ls -la "$HOME_DIR/Library/Mobile Documents/" >> "$BACKUP_DIR/icloud_config.txt" 2>/dev/null
    fi
    
    # Google Drive
    GDRIVE_PATHS=("$HOME_DIR/Library/CloudStorage/GoogleDrive-"* "$HOME_DIR/Google Drive"*)
    for gdrive_path in "${GDRIVE_PATHS[@]}"; do
        if [ -d "$gdrive_path" ]; then
            echo "Google Drive path: $gdrive_path" >> "$BACKUP_DIR/google_drive_config.txt"
            ls -la "$gdrive_path/" | head -20 >> "$BACKUP_DIR/google_drive_config.txt" 2>/dev/null
        fi
    done
    
    # OneDrive
    ONEDRIVE_PATHS=("$HOME_DIR/Library/CloudStorage/OneDrive-"* "$HOME_DIR/OneDrive"*)
    for onedrive_path in "${ONEDRIVE_PATHS[@]}"; do
        if [ -d "$onedrive_path" ]; then
            echo "OneDrive path: $onedrive_path" >> "$BACKUP_DIR/onedrive_config.txt"
            ls -la "$onedrive_path/" | head -20 >> "$BACKUP_DIR/onedrive_config.txt" 2>/dev/null
        fi
    done
    
    # Dropbox
    DROPBOX_PATHS=("$HOME_DIR/Dropbox"* "$HOME_DIR/Dropbox (Personal)" "$HOME_DIR/Dropbox (Business)")
    for dropbox_path in "${DROPBOX_PATHS[@]}"; do
        if [ -d "$dropbox_path" ]; then
            echo "Dropbox path: $dropbox_path" >> "$BACKUP_DIR/dropbox_config.txt"
            ls -la "$dropbox_path/" | head -20 >> "$BACKUP_DIR/dropbox_config.txt" 2>/dev/null
        fi
    done
    
    echo "   ‚úÖ Sauvegarde cr√©√©e: $BACKUP_DIR"
fi

# 4. Ex√©cution de la d√©duplication
echo ""
echo "‚ö° √âtape 4: Ex√©cution de la d√©duplication..."
python3 "$SMARTOPT_DIR/src/optimizers/cloud_deduplication_optimizer.py" "$HOME_DIR"

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur lors de la d√©duplication"
    exit 1
fi

# 5. Strat√©gies sp√©cifiques par probl√®me d√©tect√©
echo ""
echo "üéØ √âtape 5: Application des strat√©gies sp√©cifiques..."

# Fonction pour r√©soudre l'imbrication cloud-dans-cloud
resolve_cloud_nesting() {
    echo "  üîß R√©solution des imbrications cloud..."
    
    # Exemple: Dropbox dans Google Drive
    if [ -d "$HOME_DIR/Library/CloudStorage/GoogleDrive-*/Dropbox" ]; then
        echo "     üö® Dropbox d√©tect√© dans Google Drive"
        echo "     ‚Üí Strat√©gie: D√©placer Dropbox vers ~/Dropbox_Standalone"
        
        read -p "     Appliquer cette correction? (y/N): " fix_nesting
        if [[ $fix_nesting =~ ^[Yy]$ ]]; then
            echo "     ‚ö†Ô∏è  ATTENTION: Arr√™tez d'abord la synchronisation Dropbox"
            echo "     ‚ö†Ô∏è  Puis ex√©cutez manuellement:"
            echo "     mv '$HOME_DIR/Library/CloudStorage/GoogleDrive-*/Dropbox' '$HOME_DIR/Dropbox_Standalone'"
            echo "     ‚ö†Ô∏è  Reconfigurez Dropbox sur le nouveau chemin"
        fi
    fi
    
    # Exemple: OneDrive dans iCloud
    if [ -d "$HOME_DIR/Library/Mobile Documents/com~apple~CloudDocs/OneDrive" ]; then
        echo "     üö® OneDrive d√©tect√© dans iCloud Drive"
        echo "     ‚Üí Strat√©gie: D√©placer OneDrive vers ~/OneDrive_Business"
        
        read -p "     Appliquer cette correction? (y/N): " fix_onedrive
        if [[ $fix_onedrive =~ ^[Yy]$ ]]; then
            echo "     ‚ö†Ô∏è  Proc√©dure manuelle recommand√©e:"
            echo "     1. Arr√™ter OneDrive"
            echo "     2. D√©placer le dossier"
            echo "     3. Reconfigurer OneDrive"
        fi
    fi
}

# Fonction pour optimiser Desktop/Documents
optimize_system_folders() {
    echo "  üìÅ Optimisation des dossiers syst√®me..."
    
    # Analyser Desktop
    if [ -d "$HOME_DIR/Desktop" ]; then
        echo "     üñ•Ô∏è  Analyse du Desktop..."
        
        # V√©rifier si Desktop est dans plusieurs clouds
        DESKTOP_IN_CLOUDS=()
        
        if [ -d "$HOME_DIR/Library/Mobile Documents/com~apple~CloudDocs/Desktop" ]; then
            DESKTOP_IN_CLOUDS+=("iCloud")
        fi
        
        # V√©rifier Google Drive
        for gdrive_path in "$HOME_DIR/Library/CloudStorage/GoogleDrive-"*/Desktop "$HOME_DIR/Google Drive"*/Desktop; do
            if [ -d "$gdrive_path" ]; then
                DESKTOP_IN_CLOUDS+=("Google Drive")
                break
            fi
        done
        
        # V√©rifier OneDrive
        for onedrive_path in "$HOME_DIR/Library/CloudStorage/OneDrive-"*/Desktop "$HOME_DIR/OneDrive"*/Desktop; do
            if [ -d "$onedrive_path" ]; then
                DESKTOP_IN_CLOUDS+=("OneDrive")
                break
            fi
        done
        
        if [ ${#DESKTOP_IN_CLOUDS[@]} -gt 1 ]; then
            echo "     ‚ö†Ô∏è  Desktop synchronis√© par: ${DESKTOP_IN_CLOUDS[*]}"
            echo "     ‚Üí Recommandation: Garder uniquement dans iCloud Drive"
            echo "     ‚Üí Actions requises:"
            echo "        1. Exclure Desktop des autres services"
            echo "        2. Migrer les fichiers uniques vers iCloud"
            echo "        3. Nettoyer les doublons"
        else
            echo "     ‚úÖ Desktop correctement configur√©"
        fi
    fi
    
    # Analyser Documents
    if [ -d "$HOME_DIR/Documents" ]; then
        echo "     üìÑ Analyse des Documents..."
        
        # Logique similaire pour Documents
        DOCS_IN_CLOUDS=()
        
        if [ -d "$HOME_DIR/Library/Mobile Documents/com~apple~CloudDocs/Documents" ]; then
            DOCS_IN_CLOUDS+=("iCloud")
        fi
        
        if [ ${#DOCS_IN_CLOUDS[@]} -gt 1 ]; then
            echo "     ‚ö†Ô∏è  Documents synchronis√© par plusieurs services"
            echo "     ‚Üí Recommandation: Consolider dans iCloud Drive"
        fi
    fi
}

# Fonction pour g√©rer les fichiers Office
optimize_office_files() {
    echo "  üìä Optimisation des fichiers Office..."
    
    # Strat√©gie pour fichiers .docx, .xlsx, .pptx
    echo "     üîç Recherche de doublons Office..."
    
    # Trouver tous les fichiers Office dans tous les clouds
    OFFICE_FILES_FOUND=false
    
    # Recherche dans tous les services cloud
    for cloud_path in "$HOME_DIR/Library/CloudStorage"/*/ "$HOME_DIR/Library/Mobile Documents/com~apple~CloudDocs"/ "$HOME_DIR/Dropbox"*/ "$HOME_DIR/OneDrive"*/ "$HOME_DIR/Google Drive"*/; do
        if [ -d "$cloud_path" ]; then
            OFFICE_COUNT=$(find "$cloud_path" -name "*.docx" -o -name "*.xlsx" -o -name "*.pptx" 2>/dev/null | wc -l)
            if [ "$OFFICE_COUNT" -gt 0 ]; then
                SERVICE_NAME=$(basename "$cloud_path")
                echo "     üìã $SERVICE_NAME: $OFFICE_COUNT fichiers Office"
                OFFICE_FILES_FOUND=true
            fi
        fi
    done
    
    if [ "$OFFICE_FILES_FOUND" = true ]; then
        echo "     üí° Recommandations:"
        echo "        ‚Ä¢ OneDrive: Meilleur pour fichiers Office 365"
        echo "        ‚Ä¢ Google Drive: Convertir en Google Docs/Sheets"
        echo "        ‚Ä¢ iCloud: Convertir en Pages/Numbers/Keynote"
        echo "        ‚Ä¢ Dropbox: Garder pour partage externe uniquement"
    fi
}

# Appliquer les strat√©gies
resolve_cloud_nesting
optimize_system_folders
optimize_office_files

# 6. Configuration des exclusions
echo ""
echo "‚öôÔ∏è  √âtape 6: Configuration des exclusions recommand√©es..."

cat << 'EOF'
üìã EXCLUSIONS RECOMMAND√âES PAR SERVICE:

üçé iCloud Drive:
   ‚úÖ Synchroniser: Desktop, Documents, Photos (syst√®me)
   ‚ùå Exclure: Dossiers d'autres services cloud, node_modules, .git

üìä Google Drive:
   ‚úÖ Synchroniser: Projets collaboratifs, Google Workspace
   ‚ùå Exclure: Desktop, Documents (laisser √† iCloud), fichiers syst√®me

üíº OneDrive:
   ‚úÖ Synchroniser: Documents Office 365, projets Teams
   ‚ùå Exclure: Dossiers personnels (laisser √† iCloud), cr√©atifs (laisser √† Dropbox)

üì¶ Dropbox:
   ‚úÖ Synchroniser: Projets cr√©atifs, partages externes
   ‚ùå Exclure: Documents syst√®me, fichiers Office (laisser √† OneDrive)

üè¢ Box:
   ‚úÖ Synchroniser: Documents d'entreprise uniquement
   ‚ùå Exclure: Tout le personnel (utiliser les autres services)
EOF

# 7. Scripts de surveillance
echo ""
echo "ü§ñ √âtape 7: Configuration de la surveillance continue..."

read -p "Installer la surveillance automatique des doublons? (Y/n): " install_monitoring
if [[ ! $install_monitoring =~ ^[Nn]$ ]]; then
    
    # Cr√©er un script de surveillance
    MONITOR_SCRIPT="$HOME_DIR/.cloud_deduplication_monitor.sh"
    
    cat > "$MONITOR_SCRIPT" << 'EOF'
#!/bin/bash
# Cloud Deduplication Monitor - Surveillance automatique

SMARTOPT_DIR="$(dirname "$(realpath "$0")")/SmartOptimizer"
REPORT_DIR="$HOME/Cloud_Deduplication_Reports"
mkdir -p "$REPORT_DIR"

echo "ü§ñ Surveillance d√©duplication cloud - $(date)"

# Analyse rapide des imbrications
python3 "$SMARTOPT_DIR/src/analyzers/cloud_nesting_analyzer.py" "$HOME" > "$REPORT_DIR/nesting_report_$(date +%Y%m%d).txt"

# V√©rifier les nouveaux doublons
DUPLICATES_FOUND=$(grep -c "doublons" "$REPORT_DIR/nesting_report_$(date +%Y%m%d).txt" 2>/dev/null || echo "0")

if [ "$DUPLICATES_FOUND" -gt 10 ]; then
    echo "‚ö†Ô∏è  $DUPLICATES_FOUND nouveaux doublons d√©tect√©s!"
    echo "Rapport: $REPORT_DIR/nesting_report_$(date +%Y%m%d).txt"
    
    # Notification optionnelle
    if command -v osascript >/dev/null 2>&1; then
        osascript -e "display notification \"$DUPLICATES_FOUND nouveaux doublons cloud d√©tect√©s\" with title \"SmartOptimizer\""
    fi
else
    echo "‚úÖ Configuration cloud stable"
fi
EOF
    
    chmod +x "$MONITOR_SCRIPT"
    
    echo "   üìÖ Script de surveillance cr√©√©: $MONITOR_SCRIPT"
    echo "   üí° Pour automatiser, ajouter √† crontab:"
    echo "      0 8 * * 1 $MONITOR_SCRIPT  # Chaque lundi √† 8h"
fi

# 8. R√©sum√© et prochaines √©tapes
echo ""
echo "‚úÖ D√âDUPLICATION CLOUD TERMIN√âE"
echo "==============================="

echo ""
echo "üìä Actions effectu√©es:"
echo "   ‚Ä¢ Analyse compl√®te des imbrications"
echo "   ‚Ä¢ D√©duplication des fichiers dupliqu√©s"
echo "   ‚Ä¢ R√©solution des conflits de synchronisation"
echo "   ‚Ä¢ Configuration des strat√©gies par service"
echo "   ‚Ä¢ Installation de la surveillance continue"

echo ""
echo "üéØ Prochaines √©tapes recommand√©es:"
echo "   1. üì± V√©rifier la synchronisation sur tous vos appareils"
echo "   2. ‚öôÔ∏è  Configurer les exclusions dans chaque application cloud"
echo "   3. üóëÔ∏è  Vider les corbeilles de tous les services cloud"
echo "   4. üìä Surveiller l'utilisation d'espace les prochains jours"
echo "   5. üîÑ R√©ex√©cuter l'analyse dans 1 mois"

echo ""
echo "üíæ Sauvegardes disponibles:"
if [ -d "$BACKUP_DIR" ]; then
    echo "   ‚Ä¢ Pr√©-d√©duplication: $BACKUP_DIR"
fi
echo "   ‚Ä¢ Optimisations: ~/SmartOptimizer_Backups/cloud_deduplication/"

echo ""
echo "üìû Support:"
echo "   ‚Ä¢ Logs d√©taill√©s: ~/Cloud_Deduplication_Reports/"
echo "   ‚Ä¢ Documentation: $SMARTOPT_DIR/docs/user-guide.md"
echo "   ‚Ä¢ Issues: https://github.com/user/SmartOptimizer/issues"

echo ""
echo "üéâ Vos services cloud sont maintenant optimis√©s et d√©dupliqu√©s!"