#!/usr/bin/env python3
"""
Universal Installer - Installation multi-OS pour SmartOptimizer v1.2.0
Support Windows, macOS, Linux avec d√©tection automatique

Auteur: Pascal Froment <pascal.froment@gmail.com>
GitHub: https://github.com/FROMENT/SmartOptimizer
"""

import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path

class UniversalInstaller:
    def __init__(self):
        self.system = platform.system().lower()
        self.is_windows = self.system == 'windows'
        self.is_macos = self.system == 'darwin'
        self.is_linux = self.system == 'linux'
        
        self.project_root = Path(__file__).parent
        self.home_path = Path.home()
        
    def install(self):
        """Installation principale multi-OS"""
        self.print_header()
        
        # V√©rifications pr√©requises
        if not self.check_prerequisites():
            return False
            
        # Installation par OS
        if self.is_windows:
            return self.install_windows()
        elif self.is_macos:
            return self.install_macos()
        elif self.is_linux:
            return self.install_linux()
        else:
            print(f"‚ùå OS non support√©: {self.system}")
            return False
            
    def print_header(self):
        """Affiche l'en-t√™te d'installation"""
        print("üöÄ SMARTOPTIMIZER v1.2.0 - INSTALLATION UNIVERSELLE")
        print("=" * 55)
        print(f"üñ•Ô∏è  OS d√©tect√©: {platform.system()} {platform.release()}")
        print(f"üêç Python: {platform.python_version()}")
        print(f"üìÅ Home: {self.home_path}")
        print()
        
        print("üÜï Nouveaut√©s v1.2.0:")
        print("   ‚Ä¢ Support multi-OS (Windows, macOS, Linux)")
        print("   ‚Ä¢ OneDrive Business/Enterprise complet")
        print("   ‚Ä¢ D√©tection automatique des tenants")
        print("   ‚Ä¢ Optimisation cross-platform")
        print()
        
    def check_prerequisites(self):
        """V√©rifie les pr√©requis"""
        print("üîç V√©rification des pr√©requis...")
        
        # V√©rifier Python
        python_version = sys.version_info
        if python_version < (3, 7):
            print(f"‚ùå Python 3.7+ requis, d√©tect√©: {platform.python_version()}")
            return False
        print(f"‚úÖ Python {platform.python_version()}")
        
        # V√©rifier les modules de base
        required_modules = ['pathlib', 'subprocess', 'json', 'hashlib']
        for module in required_modules:
            try:
                __import__(module)
                print(f"‚úÖ Module {module}")
            except ImportError:
                print(f"‚ùå Module manquant: {module}")
                return False
                
        return True
        
    def install_windows(self):
        """Installation sp√©cifique Windows"""
        print("üñ•Ô∏è  Installation Windows...")
        
        # V√©rifier PowerShell
        if not self.check_powershell():
            print("‚ö†Ô∏è  PowerShell recommand√© pour une meilleure performance")
            
        # Installer les d√©pendances optionnelles
        self.install_windows_dependencies()
        
        # Configuration Windows
        self.configure_windows()
        
        # Cr√©er les raccourcis
        self.create_windows_shortcuts()
        
        return True
        
    def install_macos(self):
        """Installation sp√©cifique macOS"""
        print("üçé Installation macOS...")
        
        # V√©rifier les outils de d√©veloppement
        if not self.check_xcode_tools():
            print("‚ÑπÔ∏è  Outils de d√©veloppement Xcode recommand√©s")
            
        # Installer les d√©pendances optionnelles
        self.install_macos_dependencies()
        
        # Configuration macOS
        self.configure_macos()
        
        return True
        
    def install_linux(self):
        """Installation sp√©cifique Linux"""
        print("üêß Installation Linux...")
        
        # D√©tecter la distribution
        distro = self.detect_linux_distro()
        print(f"   Distribution d√©tect√©e: {distro}")
        
        # Installer les d√©pendances selon la distribution
        self.install_linux_dependencies(distro)
        
        # Configuration Linux
        self.configure_linux()
        
        return True
        
    def check_powershell(self):
        """V√©rifie la disponibilit√© de PowerShell"""
        try:
            result = subprocess.run(['powershell', '-Command', 'echo "test"'], 
                                  capture_output=True, timeout=5)
            return result.returncode == 0
        except:
            return False
            
    def check_xcode_tools(self):
        """V√©rifie les outils de d√©veloppement Xcode"""
        try:
            result = subprocess.run(['xcode-select', '--version'], 
                                  capture_output=True, timeout=5)
            return result.returncode == 0
        except:
            return False
            
    def detect_linux_distro(self):
        """D√©tecte la distribution Linux"""
        try:
            if Path('/etc/os-release').exists():
                with open('/etc/os-release') as f:
                    content = f.read()
                    if 'ubuntu' in content.lower():
                        return 'ubuntu'
                    elif 'debian' in content.lower():
                        return 'debian'
                    elif 'fedora' in content.lower():
                        return 'fedora'
                    elif 'centos' in content.lower():
                        return 'centos'
                    elif 'arch' in content.lower():
                        return 'arch'
        except:
            pass
        return 'unknown'
        
    def install_windows_dependencies(self):
        """Installe les d√©pendances Windows"""
        print("   üì¶ Installation des d√©pendances Windows...")
        
        # Tenter d'installer via pip
        dependencies = ['Pillow', 'requests']
        for dep in dependencies:
            try:
                subprocess.run([sys.executable, '-m', 'pip', 'install', dep], 
                              check=True, capture_output=True)
                print(f"   ‚úÖ {dep}")
            except:
                print(f"   ‚ö†Ô∏è  {dep} - Installation optionnelle")
                
        # V√©rifier winreg (inclus dans Python Windows)
        try:
            import winreg
            print("   ‚úÖ winreg (acc√®s registre)")
        except ImportError:
            print("   ‚ö†Ô∏è  winreg non disponible")
            
    def install_macos_dependencies(self):
        """Installe les d√©pendances macOS"""
        print("   üì¶ Installation des d√©pendances macOS...")
        
        dependencies = ['Pillow', 'requests']
        for dep in dependencies:
            try:
                subprocess.run([sys.executable, '-m', 'pip', 'install', dep], 
                              check=True, capture_output=True)
                print(f"   ‚úÖ {dep}")
            except:
                print(f"   ‚ö†Ô∏è  {dep} - Installation optionnelle")
                
    def install_linux_dependencies(self, distro):
        """Installe les d√©pendances Linux selon la distribution"""
        print(f"   üì¶ Installation des d√©pendances Linux ({distro})...")
        
        # D√©pendances Python
        dependencies = ['Pillow', 'requests']
        for dep in dependencies:
            try:
                subprocess.run([sys.executable, '-m', 'pip', 'install', dep], 
                              check=True, capture_output=True)
                print(f"   ‚úÖ {dep}")
            except:
                print(f"   ‚ö†Ô∏è  {dep} - Installation optionnelle")
                
        # Suggestions selon la distribution
        if distro in ['ubuntu', 'debian']:
            print("   üí° Pour OneDrive sur Ubuntu/Debian:")
            print("      sudo apt install onedrive")
        elif distro == 'fedora':
            print("   üí° Pour OneDrive sur Fedora:")
            print("      sudo dnf install onedrive")
        elif distro == 'arch':
            print("   üí° Pour OneDrive sur Arch:")
            print("      yay -S onedrive-abraunegg")
            
    def configure_windows(self):
        """Configuration sp√©cifique Windows"""
        print("   ‚öôÔ∏è  Configuration Windows...")
        
        # Cr√©er la configuration
        config_content = self.generate_config('windows')
        config_path = self.project_root / 'smartoptimizer.conf'
        
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(config_content)
            
        print(f"   ‚úÖ Configuration: {config_path}")
        
        # Rendre les scripts Python ex√©cutables (pas n√©cessaire sur Windows)
        self.make_scripts_executable()
        
    def configure_macos(self):
        """Configuration sp√©cifique macOS"""
        print("   ‚öôÔ∏è  Configuration macOS...")
        
        # Cr√©er la configuration
        config_content = self.generate_config('macos')
        config_path = self.project_root / 'smartoptimizer.conf'
        
        with open(config_path, 'w') as f:
            f.write(config_content)
            
        print(f"   ‚úÖ Configuration: {config_path}")
        
        # Rendre les scripts ex√©cutables
        self.make_scripts_executable()
        
    def configure_linux(self):
        """Configuration sp√©cifique Linux"""
        print("   ‚öôÔ∏è  Configuration Linux...")
        
        # Cr√©er la configuration
        config_content = self.generate_config('linux')
        config_path = self.project_root / 'smartoptimizer.conf'
        
        with open(config_path, 'w') as f:
            f.write(config_content)
            
        print(f"   ‚úÖ Configuration: {config_path}")
        
        # Rendre les scripts ex√©cutables
        self.make_scripts_executable()
        
    def generate_config(self, os_type):
        """G√©n√®re la configuration selon l'OS"""
        
        if os_type == 'windows':
            backup_dir = f"{self.home_path}\\SmartOptimizer_Backups"
            temp_dir = "C:\\Temp\\SmartOptimizer"
        else:
            backup_dir = f"{self.home_path}/SmartOptimizer_Backups"
            temp_dir = "/tmp/SmartOptimizer"
            
        config = f"""# SmartOptimizer v1.2.0 - Configuration {os_type.title()}
# G√©n√©ration automatique: {platform.system()} {platform.release()}

# Configuration de base
BACKUP_DIR="{backup_dir}"
TEMP_DIR="{temp_dir}"
SIMULATION_MODE=true
CONFIDENCE_THRESHOLD=70

# Configuration cloud
CLOUD_OPTIMIZATION=true
CLOUD_DEDUPLICATION_ENABLED=true
CLOUD_NESTING_DETECTION=true
CLOUD_SAFETY_CHECK_REQUIRED=true

# Support OneDrive Business/Enterprise
ONEDRIVE_BUSINESS_SUPPORT=true
TENANT_DETECTION=true

# Configuration OS
TARGET_OS="{os_type}"
CROSS_PLATFORM_MODE=true

# Performance
MAX_FILE_SCAN=10000
TIMEOUT_SECONDS=120
PARALLEL_PROCESSING=true
"""
        
        return config
        
    def make_scripts_executable(self):
        """Rend les scripts ex√©cutables (Unix)"""
        if self.is_windows:
            return  # Pas n√©cessaire sur Windows
            
        executable_patterns = [
            'src/analyzers/*.py',
            'src/optimizers/*.py', 
            'src/reorganizers/*.py',
            'src/utils/*.py',
            'scripts/*.sh',
            'examples/*.sh',
            '*.py'
        ]
        
        for pattern in executable_patterns:
            for file_path in self.project_root.glob(pattern):
                if file_path.is_file():
                    try:
                        file_path.chmod(0o755)
                    except:
                        pass
                        
    def create_windows_shortcuts(self):
        """Cr√©e des raccourcis Windows"""
        if not self.is_windows:
            return
            
        print("   üîó Cr√©ation des raccourcis Windows...")
        
        desktop = Path.home() / 'Desktop'
        if desktop.exists():
            try:
                # Cr√©er un raccourci vers le d√©tecteur cloud
                shortcut_content = f"""@echo off
cd /d "{self.project_root}"
python src\\analyzers\\universal_cloud_detector.py
pause"""
                
                shortcut_path = desktop / 'SmartOptimizer_CloudDetector.bat'
                with open(shortcut_path, 'w') as f:
                    f.write(shortcut_content)
                    
                print(f"   ‚úÖ Raccourci: {shortcut_path}")
            except:
                print("   ‚ö†Ô∏è  Impossible de cr√©er les raccourcis")
                
    def create_start_menu_entries(self):
        """Cr√©e les entr√©es du menu D√©marrer (Windows)"""
        if not self.is_windows:
            return
            
        try:
            start_menu = Path.home() / 'AppData/Roaming/Microsoft/Windows/Start Menu/Programs'
            smartopt_folder = start_menu / 'SmartOptimizer'
            smartopt_folder.mkdir(exist_ok=True)
            
            # Cr√©er les raccourcis
            shortcuts = {
                'Cloud Detector': 'src\\analyzers\\universal_cloud_detector.py',
                'Quick Overview': 'src\\analyzers\\ultra_quick_overview.py',
                'Safety Check': 'scripts\\quick_cloud_safety_check.sh'
            }
            
            for name, script_path in shortcuts.items():
                shortcut_content = f"""@echo off
cd /d "{self.project_root}"
python {script_path}
pause"""
                
                shortcut_file = smartopt_folder / f'{name}.bat'
                with open(shortcut_file, 'w') as f:
                    f.write(shortcut_content)
                    
        except:
            pass
            
    def display_completion_message(self):
        """Affiche le message de fin d'installation"""
        print()
        print("‚úÖ INSTALLATION TERMIN√âE")
        print("=" * 30)
        
        print(f"üñ•Ô∏è  SmartOptimizer v1.2.0 install√© pour {platform.system()}")
        print(f"üìÅ R√©pertoire: {self.project_root}")
        
        print()
        print("üéØ COMMANDES DISPONIBLES:")
        print("========================")
        
        if self.is_windows:
            print("üìä D√©tection cloud:")
            print(f"   python {self.project_root}\\src\\analyzers\\universal_cloud_detector.py")
            print()
            print("üîí V√©rification s√©curit√©:")
            print(f"   {self.project_root}\\scripts\\quick_cloud_safety_check.sh")
            print()
        else:
            print("üìä D√©tection cloud:")
            print(f"   python3 {self.project_root}/src/analyzers/universal_cloud_detector.py")
            print()
            print("üîí V√©rification s√©curit√©:")
            print(f"   {self.project_root}/scripts/quick_cloud_safety_check.sh")
            print()
            
        print("‚òÅÔ∏è  Optimisation multi-OS:")
        if self.is_windows:
            print(f"   python {self.project_root}\\src\\optimizers\\cloud_deduplication_optimizer.py")
        else:
            print(f"   python3 {self.project_root}/src/optimizers/cloud_deduplication_optimizer.py")
            
        print()
        print("üìö Documentation:")
        print("   ‚Ä¢ Guide utilisateur: docs/user-guide.md")
        print("   ‚Ä¢ Support multi-OS: MULTI_OS_GUIDE.md")
        print("   ‚Ä¢ OneDrive Business: ONEDRIVE_BUSINESS_GUIDE.md")
        
        print()
        print("üè¢ SUPPORT ONEDRIVE BUSINESS:")
        print("============================")
        print("‚úÖ D√©tection automatique des tenants")
        print("‚úÖ Support Windows, macOS, Linux")
        print("‚úÖ Optimisation cross-platform")
        print("‚úÖ Gestion des conflits entreprise")
        
        if self.is_windows:
            print()
            print("üñ•Ô∏è  SP√âCIAL WINDOWS:")
            print("   ‚Ä¢ Raccourcis cr√©√©s sur le Bureau")
            print("   ‚Ä¢ Support registre OneDrive")
            print("   ‚Ä¢ Int√©gration PowerShell")
            
def main():
    installer = UniversalInstaller()
    
    print("üåç SmartOptimizer - Installation Universelle")
    print("Support Windows, macOS, Linux + OneDrive Business")
    print()
    
    try:
        if installer.install():
            installer.display_completion_message()
            print()
            print("üéâ Installation r√©ussie! SmartOptimizer est pr√™t.")
            return 0
        else:
            print("‚ùå Erreur durant l'installation")
            return 1
    except KeyboardInterrupt:
        print()
        print("‚ùå Installation interrompue par l'utilisateur")
        return 1
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())